Functions
=========

```
  AND := { ((True, True), True)
         , ((True, False), False)
         , ((False, True), False)
         , ((False, False), False)
         }

  and := /\ a . /\ b . Function (Bool * Bool)
                                Bool
                                AND
                                (a,b)
       = /\ a . /\ b . ( /\ t1 . /\ t2 . /\ f . /\ x .
            ( /\ { e } . e )
                 { n : -> t1 t2 f
                     & x <- t1
                     & (m,n) <- f
                     & x = m
                 }
                       ) 
                         (Bool * Bool)
                         Bool
                         AND
                         (a,b)
       = /\ a . /\ b . ( /\ { e } . e ) { n : -> (Bool * Bool) Bool AND
                                            & (a,b) <- (Bool * Bool)
                                            & (m,n) <- AND
                                            & (a,b) = m
                                        }
```

```
  and 'a' 3 = ( /\ a . /\ b . ( /\ { e } . e ) { n : -> (Bool * Bool) Bool AND
                                                   & (a,b) <- (Bool * Bool)
                                                   & (m,n) <- AND
                                                   & (a,b) = m
                                           } ) 'a' 3
            = ( /\ { e } . e ) { n : -> (Bool * Bool) Bool AND (*) True
                                   & ('a', 3) <- (Bool * Bool) (*) False
                                   & (m,n) <- AND
                                   & ('a', 3) = m
                               }
            = ( /\ { e } . e ) {}
            = {}                                               (*) we have type checking!
```

```
  and True False = ( /\ a . /\ b . ( /\ { e } . e ) { n : -> (Bool * Bool) Bool AND
                                                        & (a,b) <- (Bool * Bool)
                                                        & (m,n) <- AND
                                                        & (a,b) = m
                                                }) True False
                 = ( \ { e } . e ) { n : -> (Bool * Bool) Bool AND        (*) True
                                       & (True, False) <- (Bool * Bool)   (*) True
                                       & (m,n) <- AND                     (*) True
                                       & (True, False) = m                (*) True
                                   }
                 = ( \ { e } . e ) { False }
                 = False                                                  (*) we have output!
```

```
  and True = ( /\ a . /\ b . ( /\ { e } . e ) { n : -> (Bool * Bool) Bool AND
                                              & (a,b) <- (Bool * Bool)
                                              & (m,n) <- AND
                                              & (a,b) = m
                                              }) True
                 = /\ b . ( /\ { e } . e ) { n : -> (Bool * Bool) Bool AND  (*) True
                                               & (True, b) <- (Bool * Bool) (*) ?
                                               & (m,n) <- AND               (*) ?
                                               & (True, b) = m              (*) ?
                                           }                                (*) we have currying!
```
