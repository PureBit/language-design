Sets Derived Forms
==================

Basic Syntax
------------

```
  S ::=                                        sets:
    {}                                         empty set
    { s }                                      set
    { x | P }                                  class
```

Complex Syntax
--------------

```
  S ::=                                        sets:
    Tpl                                        tuples
    S1 < S2                                    S1 is a subset of S2
    S1 > S2                                    S2 is a subset of S1
    S + S                                      union
    S ^ S                                      intersection
    S - S                                      complement
    S * S                                      product
    S.e                                        selection

  Tpl ::=                                      tuples:
    ()                                         unit
    (e)                                        singleton
    (e,e)                                      pair
    (e,Tple)                                   tuple
```

Derivations
-----------


Tuple:

```
  () ::= {}
  (e) ::= { fst := e }
  (e1,e2) ::= { fst := e1, snd := e2 }
  (e1, ..., eN) ::=
    { fst := e1, snd := { fst := e2, snd := fst := { ..., snd := eN } ... }
```

Subset:

```
  (<) := /\ a . /\ b . ~( { x | A x ( E y ( x <- a
                                          & y <- b
                                          & x = y
                                          ) )
                          } = {} )
                      | ( a = {} )
```

```
  (>) := /\ a . /\ b . ~( { x | A y ( E x ( x <- a
                                          & y <- b
                                          & x = y
                                          ) )
                          } = {} )
                      | ( a = {} )
```

```
  (+) := /\ a . /\ b . { x | A x ( x <- a | x <- b ) }
```

```
  (^) := /\ a . /\ b . { x | A x ( ( x <- a | x <- b )
                                 & ~( x <- a & ~( x <- b))
                                 & ~( x <- b & ~( x <- a))) }
```

```
  (-) := /\ a . /\ b . { x | A x ( x <- a & ~( x <- b ) ) }
```

```
  (*) := /\ a . /\ b . { (x,y) | A x ( A y ( x <- a & y <- b ) ) }
```

```
  a.e ::=                                        selection:
    /\ a . \ e . { x | x <- a & x = e }
```
