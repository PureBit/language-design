* I just read a couple of the papers coming out of Penn about Haskell 8.
  Not gonna lie, I'm convinced that theirs is the right approach to dependent
  types. Something like Idris or ATS is just not realistic. I'll probably
  build on their theoretical foundation, and adapt it to suit my specific
  needs.

* I really like Cayenne's simplicity[1]. I'm going to try to make that syntax work with the System V semantics in the low-level domain.

* Given that PureBit is a systems language, data is unboxed, and I will have
  to figure out a way to make the types reflect this. That being said, I'll
  probably put boxed types in the safe-use library, along with a GC.

* I don't know how to do this quite yet - or even if it is possible - but I want
  to build up all of the types from a basic type of a bit & its respective address.
  The idea is to build types that fit the hardware perfectly per, e.g. some 
  ISO specification.

[1] http://fsl.cs.illinois.edu/images/5/5e/Cayenne.pdf
