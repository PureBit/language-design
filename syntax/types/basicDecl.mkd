* Separate type declaration from function declaration (like Haskell).

* Use category theory syntax for type declarations.

* Types are capitalized (functions & objects are lower-case).

E.G.
```PureBit
f: X -> X
f x := x + x
```

That is, type declaration uses `:` instead of Haskell's `::`.

Also, it uses the set theory syntax of the `->` operator to denote mapping from
one type to another. This is the same as Haskell.

However, when objects map to other other objects, the `|->` operator is used
instead.

* N.B. The above uses some kind of typed Lambda calculus notation. Since I plan
  on using dependent types, the above example only succeeds in showing some
  of my syntax preferences, but is not representative. When I work out the
  DT syntax & semantics, I'll update the example.
