Sketch
======

This document sketches out the key theoretical constructs.

Basic Idea
----------

The core language is System FC with explicit kind equality[1].

The source language will be the closest thing I can get a variant of Cayenne[2]
to compile into System FCwEKE.

I honestly don't know how far I will get, but I am excited to find out!

Systems Programming
-------------------

PureBit is a systems programming language. As such, there is a primitive
type, namely `Bit`. It is a dependent type with an address and a bit value,
so its full declaration is more like `Bit Address Bvalue`. While `Bit` is not
part of PureBit's core language, it is part of the standard, such that it must
be defined in the derived forms, and implemented so that it is represented as
thinly as in C.

(This does assume that I will be able to implement dependent types in PureBit.)

Further, the standard must also include the keyword `area`, which defines a
data structure that fully decomposes into `Bit`s. Thus, the `area` declaration
of a `Byte` `Vector` decomposes into `Bytes`, which decomposes into `Bit`s. To
make such declarations simple, there will be a standard `Nat` type, and the
`area` declaration will allow data structures to be repeated `Nat` times in
a contiguous memory block. Finally, `area` types are contiguous in memory.

In order to get predictable performance, the evaluation strategy is strict.

The language is pure.

Finally, state is managed with monads.

Footnotes
---------

[1] http://www.cis.upenn.edu/~eir/papers/2013/fckinds/fckinds.pdf

[2] http://fsl.cs.illinois.edu/images/5/5e/Cayenne.pdf
