System PB Syntax
================

Todo:
* Patterns
* Evaluation rules
* Ensure type checking is decidable

Notes:
* Everything is an expression. The other production categories are simply to
  make the concepts clearer.

* Bits are for computation.

* Natural numbers serve many functions: constructors in sized bit vector types,
  dummy values for new data types, etc.

* The external language will have to employ very fancy inference, as this is a
  PITA to program in.

```
  Expr ::=
    Type
    Data
    Lambda
    Sum
    Record

  Type ::=
    Expr

  Data ::=
    absurd
    Bit
    Nat
    #                                            (*) Kind
    Id                                           (*) Variable
    _                                            (*) Wildcard (underscore)

  Bit ::=
    off
    on

  Nat ::=
    0
    succ Nat

  Lambda ::=
    ( Varid : Type ) -> Expr                     (*) Function type
    /\ ( Varid : Type ) |-> Expr                 (*) Abstraction
    Expr Expr                                    (*) Application

  Sum ::=
    data { VVElems }                             (*) Variant declaration
    match Expr with { Alts }                     (*) Variant scrutinization

  VVElems ::=
    Lblid := Expr
    Lblid := Expr ; VVElems

  Alts ::=
    Alt
    Alt ; Alts

  Alt ::=
    Pat |-> Expr

  Record ::=
    sig { Sign }                                 (*) Record type
    struct { Defn }                              (*) Record definition
    Expr . Lblid                                 (*) Record projection

  Sign ::=
    Lblid : Type
    Lblid : Type ; Sign

  Defn ::=
    Vis Lblid : Type := Expr
    Vis Lblid : Type := Expr ; Defn

  Vis ::=
    private
    public

  Varid ::=
    Id

  Conid ::=
    Id

  Lblid ::=
    Id
```
