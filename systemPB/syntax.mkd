System PB
=========

Lambda calculus model for PureBit.

Syntax
------

```
  t ::=                              (*) terms:
    x                                (*) variables
    l                                (*) label
    t : T                            (*) ascription
    let B in t                       (*) variable binding
    /\ x : T . t                     (*) abstraction
    t t                              (*) application
    /\ X : K . t                     (*) type abstraction
    t T                              (*) type application
    data { VElems } : T              (*) variant value
    case t as x return T of { Alts } (*) case analysis, e.g. variant scrutiny
    struct { VElems } : T            (*) record value
    t :: l                           (*) record projection

  VElems ::=                         (*) complex value elements
    VElem
    VElem ; VElems

  VElem ::=
    l := t                           (*) label value binding

  Alts ::=                           (*) case analysis arms
    Alt
    Alt ; Alts

  Alt ::=
    Patt -> t

  Patt ::=                           (*) patterns
    ???

  T ::=                              (*) types:
    X                                (*) type variable
    T -> T                           (*) function type
    ∀ X : K . T                      (*) universal type
    ∃ X : K . T                      (*) existential type
    /\ X : K . T                     (*) operator abstraction
    T T                              (*) operator application
    data { TElems }                  (*) variant type
    sig { TElems }                   (*) record type

  TElems ::=                         (*) complex type elements
    TElem
    TElem ; TElems

  TElem ::=
    l : T                            (*) label type binding

  𝚪 ::=                              (*) contexts:
    ∅                                (*) empty context
    𝚪, x : T                         (*) term variable binding
    𝚪, X : K                         (*) type variable binding

  K ::=                              (*) kinds:
    *                                (*) kind of nullary types
    K -> K                           (*) kind of operators
```
