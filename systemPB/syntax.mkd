System PB Syntax
================

Todo:
* Evaluation rules
* Ensure type checking is decidable

Notes:
* Everything is an expression. The other production categories are simply to
  make the concepts clearer.

* Bits are for computation.

* Natural numbers serve have many uses: constructors in sized bit vector types,
  dummy values for new data types, etc.

* The external language will have to employ very fancy inference, as this is a
  PITA to program in as is.

* Is the `absurd` data constructor necessary?

  Probably.

```
  Expr ::=
    Type
    Data                                          (*) Data constructors
    Lambda
    Sum
    Record

  Type ::=
    Expr

  Data ::=
    absurd
    Bit
    Nat
    *                                             (*) Kind
    Id                                            (*) Variable

  Bit ::=
    off
    on

  Nat ::=
    0
    succ Nat                                      (*) Sugared up to [1 .. n]

  Lambda ::=
    ( Varid : Type ) -> Expr                      (*) Function type
    /\ ( Varid : Type ) -> Expr                   (*) Abstraction
    Expr Expr                                     (*) Application

  Sum ::=
    data { VVElems }                              (*) Sum type
    Conid @ Type                                  (*) Constructor
    case Varid of { Alts } :: Type                (*) Sum scrutinization

  Alts ::=
    Alt
    Alt ; Alts

  Alt ::=
    ( Conid { Varids } ) -> Expr
    Varid -> Expr

  Record ::=
    sig { Sign }                                   (*) Record type
    struct { Defn }                                (*) Record instance
    Expr . Lblid                                   (*) Record projection

  Sign ::=
    Lblid : Type
    Lblid : Type := Expr
    Sign; Sign

  Defn ::=
    Vis Lblid : Type := Expr
    Vis Lblid : Type := Expr ; Defn

  Vis ::=
    private
    public Abs

  Abs ::=
    abstract
    concrete

  Varid ::=
    Id

  Varids ::=
    Varid
    Varid ; Varids

  Lblid ::=
    Id
```
