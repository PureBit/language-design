Functions
=========

```
  AND := { ((True, True), True)
         , ((True, False), False)
         , ((False, True), False)
         , ((False, False), False)
         }

  and := \ a . \ b . Function AND
                              (Bool * Bool)
                              Bool
                              (a,b)
       = \ a . \ b . ( /\ f . /\ t1 . /\ t2 . \ x . ( \ { e } . e )
                                                      { n : -> f t1 t2
                                                          & x <- t1
                                                          & (m,n) <- f
                                                          & x = m
                                                      }
                     ) AND
                       (Bool * Bool)
                       Bool
                       (a,b)
       = \ a . \ b . ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool
                                         & (a,b) <- (Bool * Bool)
                                         & (m,n) <- AND
                                         & (a,b) = m
                                     }

  and 'a' 3 = (\ a . \ b . ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool
                                               & (a,b) <- (Bool * Bool)
                                               & (m,n) <- AND
                                               & (a,b) = m
                                           }) 'a' 3
            = ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool (*) True
                                  & ('a', 3) <- (Bool * Bool) (*) False
                                  & (m,n) <- AND
                                  & ('a', 3) = m
                              }
            = ( \ { e } . e ) {}
            = {}                                              (*) we have type checking!

  and True False = (\ a . \ b . ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool
                                                    & (a,b) <- (Bool * Bool)
                                                    & (m,n) <- AND
                                                    & (a,b) = m
                                                }) True False
                 = ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool        (*) True
                                       & (True, False) <- (Bool * Bool)   (*) True
                                       & (m,n) <- AND                     (*) True
                                       & (True, False) = m                (*) True
                                   }
                 = ( \ { e } . e ) { False }
                 = False                                                  (*) we have output!

  and True = (\ a . \ b . ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool
                                              & (a,b) <- (Bool * Bool)
                                              & (m,n) <- AND
                                              & (a,b) = m
                                          }) True
                 = \ b . ( \ { e } . e ) { n : -> AND (Bool * Bool) Bool   (*) True
                                             & (True, b) <- (Bool * Bool)  (*) ?
                                             & (m,n) <- AND                (*) ?
                                             & (True, b) = m               (*) ?
                                         }
                                                                           (*) we have currying!
```
